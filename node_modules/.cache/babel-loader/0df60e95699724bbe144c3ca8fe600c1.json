{"ast":null,"code":"import _slicedToArray from \"/Users/shishir/Downloads/Web Dev/LearnReact/react-router-tutorial-blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nvar useFetch = function useFetch(url) {\n  _s();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isPending = _useState4[0],\n      setIsPending = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  useEffect(function () {\n    // creating this abort control to stop fetch request if this component is unmounted\n    var abortControl = new AbortController();\n    setTimeout(function () {\n      fetch(url, {\n        signal: abortControl.signal\n      }).then(function (res) {\n        if (!res.ok) {\n          // error coming back from server\n          throw Error(\"could not fetch the data for that resource\");\n        }\n\n        return res.json();\n      }).then(function (data) {\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      }).catch(function (err) {\n        if (err.name === \"AbortError\") {\n          console.log(\"fetch aborted!\");\n        } else {\n          // auto catches network / connection error\n          setIsPending(false);\n          setError(err.message);\n        }\n      });\n    }, 1000);\n    return function () {\n      return abortControl.abort();\n    };\n  }, [url]);\n  return {\n    data: data,\n    isPending: isPending,\n    error: error\n  };\n};\n\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/shishir/Downloads/Web Dev/LearnReact/react-router-tutorial-blog/src/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","abortControl","AbortController","setTimeout","fetch","signal","then","res","ok","Error","json","catch","err","name","console","log","message","abort"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAS;AAAA;;AACxB,kBAAwBH,QAAQ,CAAC,IAAD,CAAhC;AAAA;AAAA,MAAOI,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAAkCL,QAAQ,CAAC,IAAD,CAA1C;AAAA;AAAA,MAAOM,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAA0BP,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOQ,KAAP;AAAA,MAAcC,QAAd;;AAEAR,EAAAA,SAAS,CAAC,YAAM;AACd;AACA,QAAMS,YAAY,GAAG,IAAIC,eAAJ,EAArB;AAEAC,IAAAA,UAAU,CAAC,YAAM;AACfC,MAAAA,KAAK,CAACV,GAAD,EAAM;AACTW,QAAAA,MAAM,EAAEJ,YAAY,CAACI;AADZ,OAAN,CAAL,CAGGC,IAHH,CAGQ,UAACC,GAAD,EAAS;AACb,YAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACX;AACA,gBAAMC,KAAK,CAAC,4CAAD,CAAX;AACD;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,OATH,EAUGJ,IAVH,CAUQ,UAACX,IAAD,EAAU;AACdG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAK,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,OAdH,EAeGW,KAfH,CAeS,UAACC,GAAD,EAAS;AACd,YAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;AAC7BC,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD,SAFD,MAEO;AACL;AACAjB,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,UAAAA,QAAQ,CAACY,GAAG,CAACI,OAAL,CAAR;AACD;AACF,OAvBH;AAwBD,KAzBS,EAyBP,IAzBO,CAAV;AA2BA,WAAO;AAAA,aAAMf,YAAY,CAACgB,KAAb,EAAN;AAAA,KAAP;AACD,GAhCQ,EAgCN,CAACvB,GAAD,CAhCM,CAAT;AAkCA,SAAO;AAAEC,IAAAA,IAAI,EAAJA,IAAF;AAAQE,IAAAA,SAAS,EAATA,SAAR;AAAmBE,IAAAA,KAAK,EAALA;AAAnB,GAAP;AACD,CAxCD;;GAAMN,Q;;AA0CN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // creating this abort control to stop fetch request if this component is unmounted\n    const abortControl = new AbortController();\n\n    setTimeout(() => {\n      fetch(url, {\n        signal: abortControl.signal\n      })\n        .then((res) => {\n          if (!res.ok) {\n            // error coming back from server\n            throw Error(\"could not fetch the data for that resource\");\n          }\n          return res.json();\n        })\n        .then((data) => {\n          setIsPending(false);\n          setData(data);\n          setError(null);\n        })\n        .catch((err) => {\n          if (err.name === \"AbortError\") {\n            console.log(\"fetch aborted!\");\n          } else {\n            // auto catches network / connection error\n            setIsPending(false);\n            setError(err.message);\n          }\n        });\n    }, 1000);\n\n    return () => abortControl.abort();\n  }, [url]);\n\n  return { data, isPending, error };\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}